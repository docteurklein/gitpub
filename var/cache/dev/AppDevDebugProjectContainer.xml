<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.root_dir">/home/florian/workspace/gitpub/src/App</parameter>
    <parameter key="kernel.environment">dev</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.name">App</parameter>
    <parameter key="kernel.cache_dir">/home/florian/workspace/gitpub/src/App/../../var/cache/dev</parameter>
    <parameter key="kernel.logs_dir">/home/florian/workspace/gitpub/src/App/../../var/logs</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
      <parameter key="SecurityBundle">Symfony\Bundle\SecurityBundle\SecurityBundle</parameter>
      <parameter key="MonologBundle">Symfony\Bundle\MonologBundle\MonologBundle</parameter>
      <parameter key="KnpRadBundle">Knp\RadBundle\KnpRadBundle</parameter>
      <parameter key="App">App\App</parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">AppDevDebugProjectContainer</parameter>
    <parameter key="app.mongodb.dbname">gitpub</parameter>
    <parameter key="controller_resolver.class">Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver</parameter>
    <parameter key="controller_name_converter.class">Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser</parameter>
    <parameter key="response_listener.class">Symfony\Component\HttpKernel\EventListener\ResponseListener</parameter>
    <parameter key="streamed_response_listener.class">Symfony\Component\HttpKernel\EventListener\StreamedResponseListener</parameter>
    <parameter key="locale_listener.class">Symfony\Component\HttpKernel\EventListener\LocaleListener</parameter>
    <parameter key="event_dispatcher.class">Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher</parameter>
    <parameter key="http_kernel.class">Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel</parameter>
    <parameter key="filesystem.class">Symfony\Component\Filesystem\Filesystem</parameter>
    <parameter key="cache_warmer.class">Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate</parameter>
    <parameter key="cache_clearer.class">Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer</parameter>
    <parameter key="file_locator.class">Symfony\Component\HttpKernel\Config\FileLocator</parameter>
    <parameter key="uri_signer.class">Symfony\Component\HttpKernel\UriSigner</parameter>
    <parameter key="request_stack.class">Symfony\Component\HttpFoundation\RequestStack</parameter>
    <parameter key="fragment.handler.class">Symfony\Component\HttpKernel\Fragment\FragmentHandler</parameter>
    <parameter key="fragment.renderer.inline.class">Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer</parameter>
    <parameter key="fragment.renderer.hinclude.class">Symfony\Bundle\FrameworkBundle\Fragment\ContainerAwareHIncludeFragmentRenderer</parameter>
    <parameter key="fragment.renderer.hinclude.global_template"></parameter>
    <parameter key="fragment.renderer.esi.class">Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer</parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="translator.class">Symfony\Bundle\FrameworkBundle\Translation\Translator</parameter>
    <parameter key="translator.identity.class">Symfony\Component\Translation\IdentityTranslator</parameter>
    <parameter key="translator.selector.class">Symfony\Component\Translation\MessageSelector</parameter>
    <parameter key="translation.loader.php.class">Symfony\Component\Translation\Loader\PhpFileLoader</parameter>
    <parameter key="translation.loader.yml.class">Symfony\Component\Translation\Loader\YamlFileLoader</parameter>
    <parameter key="translation.loader.xliff.class">Symfony\Component\Translation\Loader\XliffFileLoader</parameter>
    <parameter key="translation.loader.po.class">Symfony\Component\Translation\Loader\PoFileLoader</parameter>
    <parameter key="translation.loader.mo.class">Symfony\Component\Translation\Loader\MoFileLoader</parameter>
    <parameter key="translation.loader.qt.class">Symfony\Component\Translation\Loader\QtFileLoader</parameter>
    <parameter key="translation.loader.csv.class">Symfony\Component\Translation\Loader\CsvFileLoader</parameter>
    <parameter key="translation.loader.res.class">Symfony\Component\Translation\Loader\IcuResFileLoader</parameter>
    <parameter key="translation.loader.dat.class">Symfony\Component\Translation\Loader\IcuDatFileLoader</parameter>
    <parameter key="translation.loader.ini.class">Symfony\Component\Translation\Loader\IniFileLoader</parameter>
    <parameter key="translation.loader.json.class">Symfony\Component\Translation\Loader\JsonFileLoader</parameter>
    <parameter key="translation.dumper.php.class">Symfony\Component\Translation\Dumper\PhpFileDumper</parameter>
    <parameter key="translation.dumper.xliff.class">Symfony\Component\Translation\Dumper\XliffFileDumper</parameter>
    <parameter key="translation.dumper.po.class">Symfony\Component\Translation\Dumper\PoFileDumper</parameter>
    <parameter key="translation.dumper.mo.class">Symfony\Component\Translation\Dumper\MoFileDumper</parameter>
    <parameter key="translation.dumper.yml.class">Symfony\Component\Translation\Dumper\YamlFileDumper</parameter>
    <parameter key="translation.dumper.qt.class">Symfony\Component\Translation\Dumper\QtFileDumper</parameter>
    <parameter key="translation.dumper.csv.class">Symfony\Component\Translation\Dumper\CsvFileDumper</parameter>
    <parameter key="translation.dumper.ini.class">Symfony\Component\Translation\Dumper\IniFileDumper</parameter>
    <parameter key="translation.dumper.json.class">Symfony\Component\Translation\Dumper\JsonFileDumper</parameter>
    <parameter key="translation.dumper.res.class">Symfony\Component\Translation\Dumper\IcuResFileDumper</parameter>
    <parameter key="translation.extractor.php.class">Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor</parameter>
    <parameter key="translation.loader.class">Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader</parameter>
    <parameter key="translation.extractor.class">Symfony\Component\Translation\Extractor\ChainExtractor</parameter>
    <parameter key="translation.writer.class">Symfony\Component\Translation\Writer\TranslationWriter</parameter>
    <parameter key="property_accessor.class">Symfony\Component\PropertyAccess\PropertyAccessor</parameter>
    <parameter key="debug.errors_logger_listener.class">Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener</parameter>
    <parameter key="debug.event_dispatcher.class">Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher</parameter>
    <parameter key="debug.stopwatch.class">Symfony\Component\Stopwatch\Stopwatch</parameter>
    <parameter key="debug.container.dump">/home/florian/workspace/gitpub/src/App/../../var/cache/dev/AppDevDebugProjectContainer.xml</parameter>
    <parameter key="debug.controller_resolver.class">Symfony\Component\HttpKernel\Controller\TraceableControllerResolver</parameter>
    <parameter key="kernel.secret">123456789</parameter>
    <parameter key="kernel.http_method_override">true</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.trusted_proxies" type="collection"/>
    <parameter key="kernel.default_locale">en</parameter>
    <parameter key="session.class">Symfony\Component\HttpFoundation\Session\Session</parameter>
    <parameter key="session.flashbag.class">Symfony\Component\HttpFoundation\Session\Flash\FlashBag</parameter>
    <parameter key="session.attribute_bag.class">Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag</parameter>
    <parameter key="session.storage.metadata_bag.class">Symfony\Component\HttpFoundation\Session\Storage\MetadataBag</parameter>
    <parameter key="session.metadata.storage_key">_sf2_meta</parameter>
    <parameter key="session.storage.native.class">Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage</parameter>
    <parameter key="session.storage.php_bridge.class">Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage</parameter>
    <parameter key="session.storage.mock_file.class">Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage</parameter>
    <parameter key="session.handler.native_file.class">Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler</parameter>
    <parameter key="session.handler.write_check.class">Symfony\Component\HttpFoundation\Session\Storage\Handler\WriteCheckSessionHandler</parameter>
    <parameter key="session_listener.class">Symfony\Bundle\FrameworkBundle\EventListener\SessionListener</parameter>
    <parameter key="session.storage.options" type="collection"/>
    <parameter key="session.save_path">/home/florian/workspace/gitpub/src/App/../../var/cache/dev/sessions</parameter>
    <parameter key="session.metadata.update_threshold">0</parameter>
    <parameter key="security.secure_random.class">Symfony\Component\Security\Core\Util\SecureRandom</parameter>
    <parameter key="form.resolved_type_factory.class">Symfony\Component\Form\ResolvedFormTypeFactory</parameter>
    <parameter key="form.registry.class">Symfony\Component\Form\FormRegistry</parameter>
    <parameter key="form.factory.class">Symfony\Component\Form\FormFactory</parameter>
    <parameter key="form.extension.class">Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension</parameter>
    <parameter key="form.type_guesser.validator.class">Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser</parameter>
    <parameter key="form.type_extension.csrf.enabled">true</parameter>
    <parameter key="form.type_extension.csrf.field_name">_token</parameter>
    <parameter key="security.csrf.token_generator.class">Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator</parameter>
    <parameter key="security.csrf.token_storage.class">Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage</parameter>
    <parameter key="security.csrf.token_manager.class">Symfony\Component\Security\Csrf\CsrfTokenManager</parameter>
    <parameter key="validator.class">Symfony\Component\Validator\Validator</parameter>
    <parameter key="validator.mapping.class_metadata_factory.class">Symfony\Component\Validator\Mapping\ClassMetadataFactory</parameter>
    <parameter key="validator.mapping.cache.apc.class">Symfony\Component\Validator\Mapping\Cache\ApcCache</parameter>
    <parameter key="validator.mapping.cache.prefix"></parameter>
    <parameter key="validator.mapping.loader.loader_chain.class">Symfony\Component\Validator\Mapping\Loader\LoaderChain</parameter>
    <parameter key="validator.mapping.loader.static_method_loader.class">Symfony\Component\Validator\Mapping\Loader\StaticMethodLoader</parameter>
    <parameter key="validator.mapping.loader.annotation_loader.class">Symfony\Component\Validator\Mapping\Loader\AnnotationLoader</parameter>
    <parameter key="validator.mapping.loader.xml_files_loader.class">Symfony\Component\Validator\Mapping\Loader\XmlFilesLoader</parameter>
    <parameter key="validator.mapping.loader.yaml_files_loader.class">Symfony\Component\Validator\Mapping\Loader\YamlFilesLoader</parameter>
    <parameter key="validator.validator_factory.class">Symfony\Bundle\FrameworkBundle\Validator\ConstraintValidatorFactory</parameter>
    <parameter key="validator.mapping.loader.xml_files_loader.mapping_files" type="collection">
      <parameter>/home/florian/workspace/gitpub/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/config/validation.xml</parameter>
    </parameter>
    <parameter key="validator.mapping.loader.yaml_files_loader.mapping_files" type="collection"/>
    <parameter key="validator.expression.class">Symfony\Component\Validator\Constraints\ExpressionValidator</parameter>
    <parameter key="validator.translation_domain">validators</parameter>
    <parameter key="data_collector.templates" type="collection"/>
    <parameter key="router.class">Symfony\Bundle\FrameworkBundle\Routing\Router</parameter>
    <parameter key="router.request_context.class">Symfony\Component\Routing\RequestContext</parameter>
    <parameter key="routing.loader.class">Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader</parameter>
    <parameter key="routing.resolver.class">Symfony\Component\Config\Loader\LoaderResolver</parameter>
    <parameter key="routing.loader.xml.class">Symfony\Component\Routing\Loader\XmlFileLoader</parameter>
    <parameter key="routing.loader.yml.class">Symfony\Component\Routing\Loader\YamlFileLoader</parameter>
    <parameter key="routing.loader.php.class">Symfony\Component\Routing\Loader\PhpFileLoader</parameter>
    <parameter key="router.options.generator_class">Symfony\Component\Routing\Generator\UrlGenerator</parameter>
    <parameter key="router.options.generator_base_class">Symfony\Component\Routing\Generator\UrlGenerator</parameter>
    <parameter key="router.options.generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\PhpGeneratorDumper</parameter>
    <parameter key="router.options.matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</parameter>
    <parameter key="router.options.matcher_base_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</parameter>
    <parameter key="router.options.matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper</parameter>
    <parameter key="router.cache_warmer.class">Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer</parameter>
    <parameter key="router.options.matcher.cache_class">AppDevUrlMatcher</parameter>
    <parameter key="router.options.generator.cache_class">AppDevUrlGenerator</parameter>
    <parameter key="router_listener.class">Symfony\Component\HttpKernel\EventListener\RouterListener</parameter>
    <parameter key="router.request_context.host">localhost</parameter>
    <parameter key="router.request_context.scheme">http</parameter>
    <parameter key="router.request_context.base_url"></parameter>
    <parameter key="router.resource">/home/florian/workspace/gitpub/src/App/config/routing_dev.yml</parameter>
    <parameter key="router.cache_class_prefix">AppDev</parameter>
    <parameter key="request_listener.http_port">80</parameter>
    <parameter key="request_listener.https_port">443</parameter>
    <parameter key="annotations.reader.class">Doctrine\Common\Annotations\AnnotationReader</parameter>
    <parameter key="annotations.cached_reader.class">Doctrine\Common\Annotations\CachedReader</parameter>
    <parameter key="annotations.file_cache_reader.class">Doctrine\Common\Annotations\FileCacheReader</parameter>
    <parameter key="security.context.class">Symfony\Component\Security\Core\SecurityContext</parameter>
    <parameter key="security.user_checker.class">Symfony\Component\Security\Core\User\UserChecker</parameter>
    <parameter key="security.encoder_factory.generic.class">Symfony\Component\Security\Core\Encoder\EncoderFactory</parameter>
    <parameter key="security.encoder.digest.class">Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder</parameter>
    <parameter key="security.encoder.plain.class">Symfony\Component\Security\Core\Encoder\PlaintextPasswordEncoder</parameter>
    <parameter key="security.encoder.pbkdf2.class">Symfony\Component\Security\Core\Encoder\Pbkdf2PasswordEncoder</parameter>
    <parameter key="security.encoder.bcrypt.class">Symfony\Component\Security\Core\Encoder\BCryptPasswordEncoder</parameter>
    <parameter key="security.user.provider.in_memory.class">Symfony\Component\Security\Core\User\InMemoryUserProvider</parameter>
    <parameter key="security.user.provider.in_memory.user.class">Symfony\Component\Security\Core\User\User</parameter>
    <parameter key="security.user.provider.chain.class">Symfony\Component\Security\Core\User\ChainUserProvider</parameter>
    <parameter key="security.authentication.trust_resolver.class">Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver</parameter>
    <parameter key="security.authentication.trust_resolver.anonymous_class">Symfony\Component\Security\Core\Authentication\Token\AnonymousToken</parameter>
    <parameter key="security.authentication.trust_resolver.rememberme_class">Symfony\Component\Security\Core\Authentication\Token\RememberMeToken</parameter>
    <parameter key="security.authentication.manager.class">Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager</parameter>
    <parameter key="security.authentication.session_strategy.class">Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy</parameter>
    <parameter key="security.access.decision_manager.class">Symfony\Component\Security\Core\Authorization\AccessDecisionManager</parameter>
    <parameter key="security.access.simple_role_voter.class">Symfony\Component\Security\Core\Authorization\Voter\RoleVoter</parameter>
    <parameter key="security.access.authenticated_voter.class">Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter</parameter>
    <parameter key="security.access.role_hierarchy_voter.class">Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter</parameter>
    <parameter key="security.access.expression_voter.class">Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter</parameter>
    <parameter key="security.firewall.class">Symfony\Component\Security\Http\Firewall</parameter>
    <parameter key="security.firewall.map.class">Symfony\Bundle\SecurityBundle\Security\FirewallMap</parameter>
    <parameter key="security.firewall.context.class">Symfony\Bundle\SecurityBundle\Security\FirewallContext</parameter>
    <parameter key="security.matcher.class">Symfony\Component\HttpFoundation\RequestMatcher</parameter>
    <parameter key="security.expression_matcher.class">Symfony\Component\HttpFoundation\ExpressionRequestMatcher</parameter>
    <parameter key="security.role_hierarchy.class">Symfony\Component\Security\Core\Role\RoleHierarchy</parameter>
    <parameter key="security.http_utils.class">Symfony\Component\Security\Http\HttpUtils</parameter>
    <parameter key="security.validator.user_password.class">Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator</parameter>
    <parameter key="security.expression_language.class">Symfony\Component\Security\Core\Authorization\ExpressionLanguage</parameter>
    <parameter key="security.authentication.retry_entry_point.class">Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint</parameter>
    <parameter key="security.channel_listener.class">Symfony\Component\Security\Http\Firewall\ChannelListener</parameter>
    <parameter key="security.authentication.form_entry_point.class">Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint</parameter>
    <parameter key="security.authentication.listener.form.class">Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener</parameter>
    <parameter key="security.authentication.listener.simple_form.class">Symfony\Component\Security\Http\Firewall\SimpleFormAuthenticationListener</parameter>
    <parameter key="security.authentication.listener.simple_preauth.class">Symfony\Component\Security\Http\Firewall\SimplePreAuthenticationListener</parameter>
    <parameter key="security.authentication.listener.basic.class">Symfony\Component\Security\Http\Firewall\BasicAuthenticationListener</parameter>
    <parameter key="security.authentication.basic_entry_point.class">Symfony\Component\Security\Http\EntryPoint\BasicAuthenticationEntryPoint</parameter>
    <parameter key="security.authentication.listener.digest.class">Symfony\Component\Security\Http\Firewall\DigestAuthenticationListener</parameter>
    <parameter key="security.authentication.digest_entry_point.class">Symfony\Component\Security\Http\EntryPoint\DigestAuthenticationEntryPoint</parameter>
    <parameter key="security.authentication.listener.x509.class">Symfony\Component\Security\Http\Firewall\X509AuthenticationListener</parameter>
    <parameter key="security.authentication.listener.anonymous.class">Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener</parameter>
    <parameter key="security.authentication.switchuser_listener.class">Symfony\Component\Security\Http\Firewall\SwitchUserListener</parameter>
    <parameter key="security.logout_listener.class">Symfony\Component\Security\Http\Firewall\LogoutListener</parameter>
    <parameter key="security.logout.handler.session.class">Symfony\Component\Security\Http\Logout\SessionLogoutHandler</parameter>
    <parameter key="security.logout.handler.cookie_clearing.class">Symfony\Component\Security\Http\Logout\CookieClearingLogoutHandler</parameter>
    <parameter key="security.logout.success_handler.class">Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler</parameter>
    <parameter key="security.access_listener.class">Symfony\Component\Security\Http\Firewall\AccessListener</parameter>
    <parameter key="security.access_map.class">Symfony\Component\Security\Http\AccessMap</parameter>
    <parameter key="security.exception_listener.class">Symfony\Component\Security\Http\Firewall\ExceptionListener</parameter>
    <parameter key="security.context_listener.class">Symfony\Component\Security\Http\Firewall\ContextListener</parameter>
    <parameter key="security.authentication.provider.dao.class">Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider</parameter>
    <parameter key="security.authentication.provider.simple.class">Symfony\Component\Security\Core\Authentication\Provider\SimpleAuthenticationProvider</parameter>
    <parameter key="security.authentication.provider.pre_authenticated.class">Symfony\Component\Security\Core\Authentication\Provider\PreAuthenticatedAuthenticationProvider</parameter>
    <parameter key="security.authentication.provider.anonymous.class">Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider</parameter>
    <parameter key="security.authentication.success_handler.class">Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler</parameter>
    <parameter key="security.authentication.failure_handler.class">Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler</parameter>
    <parameter key="security.authentication.simple_success_failure_handler.class">Symfony\Component\Security\Http\Authentication\SimpleAuthenticationHandler</parameter>
    <parameter key="security.authentication.provider.rememberme.class">Symfony\Component\Security\Core\Authentication\Provider\RememberMeAuthenticationProvider</parameter>
    <parameter key="security.authentication.listener.rememberme.class">Symfony\Component\Security\Http\Firewall\RememberMeListener</parameter>
    <parameter key="security.rememberme.token.provider.in_memory.class">Symfony\Component\Security\Core\Authentication\RememberMe\InMemoryTokenProvider</parameter>
    <parameter key="security.authentication.rememberme.services.persistent.class">Symfony\Component\Security\Http\RememberMe\PersistentTokenBasedRememberMeServices</parameter>
    <parameter key="security.authentication.rememberme.services.simplehash.class">Symfony\Component\Security\Http\RememberMe\TokenBasedRememberMeServices</parameter>
    <parameter key="security.rememberme.response_listener.class">Symfony\Component\Security\Http\RememberMe\ResponseListener</parameter>
    <parameter key="templating.helper.logout_url.class">Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper</parameter>
    <parameter key="templating.helper.security.class">Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper</parameter>
    <parameter key="twig.extension.logout_url.class">Symfony\Bundle\SecurityBundle\Twig\Extension\LogoutUrlExtension</parameter>
    <parameter key="twig.extension.security.class">Symfony\Bridge\Twig\Extension\SecurityExtension</parameter>
    <parameter key="data_collector.security.class">Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector</parameter>
    <parameter key="security.access.denied_url">null</parameter>
    <parameter key="security.authentication.manager.erase_credentials">true</parameter>
    <parameter key="security.authentication.session_strategy.strategy">migrate</parameter>
    <parameter key="security.access.always_authenticate_before_granting">false</parameter>
    <parameter key="security.authentication.hide_user_not_found">true</parameter>
    <parameter key="security.role_hierarchy.roles" type="collection">
      <parameter key="ROLE_ADMIN" type="collection">
        <parameter>ROLE_USER</parameter>
      </parameter>
      <parameter key="ROLE_SUPER_ADMIN" type="collection">
        <parameter>ROLE_USER</parameter>
        <parameter>ROLE_ADMIN</parameter>
        <parameter>ROLE_ALLOWED_TO_SWITCH</parameter>
      </parameter>
    </parameter>
    <parameter key="monolog.logger.class">Symfony\Bridge\Monolog\Logger</parameter>
    <parameter key="monolog.gelf.publisher.class">Gelf\MessagePublisher</parameter>
    <parameter key="monolog.handler.stream.class">Monolog\Handler\StreamHandler</parameter>
    <parameter key="monolog.handler.console.class">Symfony\Bridge\Monolog\Handler\ConsoleHandler</parameter>
    <parameter key="monolog.handler.group.class">Monolog\Handler\GroupHandler</parameter>
    <parameter key="monolog.handler.buffer.class">Monolog\Handler\BufferHandler</parameter>
    <parameter key="monolog.handler.rotating_file.class">Monolog\Handler\RotatingFileHandler</parameter>
    <parameter key="monolog.handler.syslog.class">Monolog\Handler\SyslogHandler</parameter>
    <parameter key="monolog.handler.null.class">Monolog\Handler\NullHandler</parameter>
    <parameter key="monolog.handler.test.class">Monolog\Handler\TestHandler</parameter>
    <parameter key="monolog.handler.gelf.class">Monolog\Handler\GelfHandler</parameter>
    <parameter key="monolog.handler.firephp.class">Symfony\Bridge\Monolog\Handler\FirePHPHandler</parameter>
    <parameter key="monolog.handler.chromephp.class">Symfony\Bridge\Monolog\Handler\ChromePhpHandler</parameter>
    <parameter key="monolog.handler.debug.class">Symfony\Bridge\Monolog\Handler\DebugHandler</parameter>
    <parameter key="monolog.handler.swift_mailer.class">Symfony\Bridge\Monolog\Handler\SwiftMailerHandler</parameter>
    <parameter key="monolog.handler.native_mailer.class">Monolog\Handler\NativeMailerHandler</parameter>
    <parameter key="monolog.handler.socket.class">Monolog\Handler\SocketHandler</parameter>
    <parameter key="monolog.handler.pushover.class">Monolog\Handler\PushoverHandler</parameter>
    <parameter key="monolog.handler.raven.class">Monolog\Handler\RavenHandler</parameter>
    <parameter key="monolog.handler.newrelic.class">Monolog\Handler\NewRelicHandler</parameter>
    <parameter key="monolog.handler.hipchat.class">Monolog\Handler\HipChatHandler</parameter>
    <parameter key="monolog.handler.cube.class">Monolog\Handler\CubeHandler</parameter>
    <parameter key="monolog.handler.amqp.class">Monolog\Handler\AmqpHandler</parameter>
    <parameter key="monolog.handler.error_log.class">Monolog\Handler\ErrorLogHandler</parameter>
    <parameter key="monolog.activation_strategy.not_found.class">Symfony\Bundle\MonologBundle\NotFoundActivationStrategy</parameter>
    <parameter key="monolog.handler.fingers_crossed.class">Monolog\Handler\FingersCrossedHandler</parameter>
    <parameter key="monolog.handler.fingers_crossed.error_level_activation_strategy.class">Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy</parameter>
    <parameter key="monolog.handlers_to_channels" type="collection">
      <parameter key="monolog.handler.firephp">null</parameter>
      <parameter key="monolog.handler.main">null</parameter>
    </parameter>
    <parameter key="knp_rad.bundle.guesser.class">Knp\RadBundle\AppBundle\BundleGuesser</parameter>
    <parameter key="knp_rad.reflection_factory.class">Knp\RadBundle\Reflection\ReflectionFactory</parameter>
    <parameter key="knp_rad.mailer.message_factory.class">Knp\RadBundle\Mailer\MessageFactory</parameter>
    <parameter key="knp_rad.view.listener.class">Knp\RadBundle\EventListener\ViewListener</parameter>
    <parameter key="knp_rad.filesystem.path_expander.class">Knp\RadBundle\Filesystem\PathExpander</parameter>
    <parameter key="knp_rad.view.path_deducer.class">Knp\RadBundle\View\PathDeducer</parameter>
    <parameter key="knp_rad.view.path_deducer.logicalnames" type="collection">
      <parameter key="index">KnpRadBundle:Assistant/skeleton:_index.html.twig</parameter>
      <parameter key="show">KnpRadBundle:Assistant/skeleton:_show.html.twig</parameter>
      <parameter key="new">KnpRadBundle:Assistant/skeleton:_new.html.twig</parameter>
      <parameter key="edit">KnpRadBundle:Assistant/skeleton:_edit.html.twig</parameter>
    </parameter>
    <parameter key="knp_rad.view.path_deducer.defaultlogicalname">KnpRadBundle:Assistant/skeleton:_viewBody.html.twig</parameter>
    <parameter key="knp_rad.resource.resolver.request.class">Knp\RadBundle\Resource\Resolver\RequestResolver</parameter>
    <parameter key="knp_rad.resource.resolver.resource.class">Knp\RadBundle\Resource\Resolver\ResourceResolver</parameter>
    <parameter key="knp_rad.resource.resolver.argument.class">Knp\RadBundle\Resource\Resolver\ArgumentResolver</parameter>
    <parameter key="knp_rad.event_listener.resource_resolver.class">Knp\RadBundle\EventListener\ResourceResolverListener</parameter>
    <parameter key="knp_rad.orm.user_listener.class">Knp\RadBundle\Doctrine\Listener\PasswordHashListener</parameter>
    <parameter key="knp_rad.routing.loader.class">Knp\RadBundle\Routing\Loader\ConventionalLoader</parameter>
    <parameter key="knp_rad.form.manager.class">Knp\RadBundle\Form\FormManager</parameter>
    <parameter key="knp_rad.form.type_creator.class">Knp\RadBundle\Form\FormTypeCreator</parameter>
    <parameter key="knp_rad.form.default_creator.class">Knp\RadBundle\Form\DefaultFormCreator</parameter>
    <parameter key="knp_rad.form.type_guesser.data.class">Knp\RadBundle\Form\DataTypeGuesser</parameter>
    <parameter key="knp_rad.reflection.metadata_fetcher.class">Knp\RadBundle\Reflection\ClassMetadataFetcher</parameter>
    <parameter key="knp_rad.security.voter.is_owner.class">Knp\RadBundle\Security\Voter\IsOwnerVoter</parameter>
    <parameter key="knp_rad.twig.datatable.class">Knp\RadBundle\Twig\DataTableTwigExtension</parameter>
    <parameter key="knp_rad.csrf_link.intention">link</parameter>
    <parameter key="knp_rad.flashes.trans_catalog">messages</parameter>
    <parameter key="knp_rad.flash.message_renderer.class">Knp\RadBundle\Flash\MessageRenderer</parameter>
    <parameter key="knp_rad.twig.flash_extension.class">Knp\RadBundle\Twig\FlashExtension</parameter>
    <parameter key="knp_rad.decision_manager.id">security.access.decision_manager</parameter>
    <parameter key="console.command.ids" type="collection"/>
  </parameters>
  <services>
    <service id="controller_name_converter" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser" public="false">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="kernel"/>
    </service>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener">
      <tag name="kernel.event_subscriber"/>
      <argument>UTF-8</argument>
    </service>
    <service id="streamed_response_listener" class="Symfony\Component\HttpKernel\EventListener\StreamedResponseListener">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener">
      <tag name="kernel.event_subscriber"/>
      <argument>en</argument>
      <argument type="service" id="router" on-invalid="ignore"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel">
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="debug.controller_resolver"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack"/>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate">
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer" public="false">
            <tag name="kernel.cache_warmer"/>
            <argument type="service" id="router"/>
          </service>
        </argument>
      </argument>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer">
      <argument type="collection"/>
    </service>
    <service id="request" scope="request" synthetic="true" synchronized="true"/>
    <service id="service_container" synthetic="true"/>
    <service id="kernel" synthetic="true"/>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem"/>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator">
      <argument type="service" id="kernel"/>
      <argument>/home/florian/workspace/gitpub/src/App/Resources</argument>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpKernel\UriSigner">
      <argument>123456789</argument>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\Fragment\FragmentHandler">
      <argument type="collection"/>
      <argument>true</argument>
      <argument type="service" id="request_stack"/>
      <call method="addRenderer">
        <argument type="service" id="fragment.renderer.inline"/>
      </call>
      <call method="addRenderer">
        <argument type="service" id="fragment.renderer.hinclude"/>
      </call>
      <call method="addRenderer">
        <argument type="service" id="fragment.renderer.esi"/>
      </call>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer">
      <tag name="kernel.fragment_renderer"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="fragment.renderer.hinclude" class="Symfony\Bundle\FrameworkBundle\Fragment\ContainerAwareHIncludeFragmentRenderer">
      <tag name="kernel.fragment_renderer"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="uri_signer"/>
      <argument></argument>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="fragment.renderer.esi" class="Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer">
      <tag name="kernel.fragment_renderer"/>
      <argument>null</argument>
      <argument type="service" id="fragment.renderer.inline"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="translator.default" class="Symfony\Bundle\FrameworkBundle\Translation\Translator">
      <argument type="service" id="service_container"/>
      <argument type="service" id="translator.selector"/>
      <argument type="collection">
        <argument key="translation.loader.php" type="collection">
          <argument>php</argument>
        </argument>
        <argument key="translation.loader.yml" type="collection">
          <argument>yml</argument>
        </argument>
        <argument key="translation.loader.xliff" type="collection">
          <argument>xlf</argument>
          <argument>xliff</argument>
        </argument>
        <argument key="translation.loader.po" type="collection">
          <argument>po</argument>
        </argument>
        <argument key="translation.loader.mo" type="collection">
          <argument>mo</argument>
        </argument>
        <argument key="translation.loader.qt" type="collection">
          <argument>ts</argument>
        </argument>
        <argument key="translation.loader.csv" type="collection">
          <argument>csv</argument>
        </argument>
        <argument key="translation.loader.res" type="collection">
          <argument>res</argument>
        </argument>
        <argument key="translation.loader.dat" type="collection">
          <argument>dat</argument>
        </argument>
        <argument key="translation.loader.ini" type="collection">
          <argument>ini</argument>
        </argument>
        <argument key="translation.loader.json" type="collection">
          <argument>json</argument>
        </argument>
      </argument>
      <argument type="collection">
        <argument key="cache_dir">/home/florian/workspace/gitpub/src/App/../../var/cache/dev/translations</argument>
        <argument key="debug">true</argument>
      </argument>
    </service>
    <service id="translator" class="Symfony\Component\Translation\IdentityTranslator">
      <argument type="service" id="translator.selector"/>
    </service>
    <service id="translator.selector" class="Symfony\Component\Translation\MessageSelector" public="false"/>
    <service id="translation.loader.php" class="Symfony\Component\Translation\Loader\PhpFileLoader">
      <tag name="translation.loader" alias="php"/>
    </service>
    <service id="translation.loader.yml" class="Symfony\Component\Translation\Loader\YamlFileLoader">
      <tag name="translation.loader" alias="yml"/>
    </service>
    <service id="translation.loader.xliff" class="Symfony\Component\Translation\Loader\XliffFileLoader">
      <tag name="translation.loader" alias="xlf" legacy-alias="xliff"/>
    </service>
    <service id="translation.loader.po" class="Symfony\Component\Translation\Loader\PoFileLoader">
      <tag name="translation.loader" alias="po"/>
    </service>
    <service id="translation.loader.mo" class="Symfony\Component\Translation\Loader\MoFileLoader">
      <tag name="translation.loader" alias="mo"/>
    </service>
    <service id="translation.loader.qt" class="Symfony\Component\Translation\Loader\QtFileLoader">
      <tag name="translation.loader" alias="ts"/>
    </service>
    <service id="translation.loader.csv" class="Symfony\Component\Translation\Loader\CsvFileLoader">
      <tag name="translation.loader" alias="csv"/>
    </service>
    <service id="translation.loader.res" class="Symfony\Component\Translation\Loader\IcuResFileLoader">
      <tag name="translation.loader" alias="res"/>
    </service>
    <service id="translation.loader.dat" class="Symfony\Component\Translation\Loader\IcuDatFileLoader">
      <tag name="translation.loader" alias="dat"/>
    </service>
    <service id="translation.loader.ini" class="Symfony\Component\Translation\Loader\IniFileLoader">
      <tag name="translation.loader" alias="ini"/>
    </service>
    <service id="translation.loader.json" class="Symfony\Component\Translation\Loader\JsonFileLoader">
      <tag name="translation.loader" alias="json"/>
    </service>
    <service id="translation.dumper.php" class="Symfony\Component\Translation\Dumper\PhpFileDumper">
      <tag name="translation.dumper" alias="php"/>
    </service>
    <service id="translation.dumper.xliff" class="Symfony\Component\Translation\Dumper\XliffFileDumper">
      <tag name="translation.dumper" alias="xlf"/>
    </service>
    <service id="translation.dumper.po" class="Symfony\Component\Translation\Dumper\PoFileDumper">
      <tag name="translation.dumper" alias="po"/>
    </service>
    <service id="translation.dumper.mo" class="Symfony\Component\Translation\Dumper\MoFileDumper">
      <tag name="translation.dumper" alias="mo"/>
    </service>
    <service id="translation.dumper.yml" class="Symfony\Component\Translation\Dumper\YamlFileDumper">
      <tag name="translation.dumper" alias="yml"/>
    </service>
    <service id="translation.dumper.qt" class="Symfony\Component\Translation\Dumper\QtFileDumper">
      <tag name="translation.dumper" alias="ts"/>
    </service>
    <service id="translation.dumper.csv" class="Symfony\Component\Translation\Dumper\CsvFileDumper">
      <tag name="translation.dumper" alias="csv"/>
    </service>
    <service id="translation.dumper.ini" class="Symfony\Component\Translation\Dumper\IniFileDumper">
      <tag name="translation.dumper" alias="ini"/>
    </service>
    <service id="translation.dumper.json" class="Symfony\Component\Translation\Dumper\JsonFileDumper">
      <tag name="translation.dumper" alias="json"/>
    </service>
    <service id="translation.dumper.res" class="Symfony\Component\Translation\Dumper\IcuResFileDumper">
      <tag name="translation.dumper" alias="res"/>
    </service>
    <service id="translation.extractor.php" class="Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor">
      <tag name="translation.extractor" alias="php"/>
    </service>
    <service id="translation.loader" class="Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader">
      <call method="addLoader">
        <argument>php</argument>
        <argument type="service" id="translation.loader.php"/>
      </call>
      <call method="addLoader">
        <argument>yml</argument>
        <argument type="service" id="translation.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument>xlf</argument>
        <argument type="service" id="translation.loader.xliff"/>
      </call>
      <call method="addLoader">
        <argument>xliff</argument>
        <argument type="service" id="translation.loader.xliff"/>
      </call>
      <call method="addLoader">
        <argument>po</argument>
        <argument type="service" id="translation.loader.po"/>
      </call>
      <call method="addLoader">
        <argument>mo</argument>
        <argument type="service" id="translation.loader.mo"/>
      </call>
      <call method="addLoader">
        <argument>ts</argument>
        <argument type="service" id="translation.loader.qt"/>
      </call>
      <call method="addLoader">
        <argument>csv</argument>
        <argument type="service" id="translation.loader.csv"/>
      </call>
      <call method="addLoader">
        <argument>res</argument>
        <argument type="service" id="translation.loader.res"/>
      </call>
      <call method="addLoader">
        <argument>dat</argument>
        <argument type="service" id="translation.loader.dat"/>
      </call>
      <call method="addLoader">
        <argument>ini</argument>
        <argument type="service" id="translation.loader.ini"/>
      </call>
      <call method="addLoader">
        <argument>json</argument>
        <argument type="service" id="translation.loader.json"/>
      </call>
    </service>
    <service id="translation.extractor" class="Symfony\Component\Translation\Extractor\ChainExtractor">
      <call method="addExtractor">
        <argument>php</argument>
        <argument type="service" id="translation.extractor.php"/>
      </call>
    </service>
    <service id="translation.writer" class="Symfony\Component\Translation\Writer\TranslationWriter">
      <call method="addDumper">
        <argument>php</argument>
        <argument type="service" id="translation.dumper.php"/>
      </call>
      <call method="addDumper">
        <argument>xlf</argument>
        <argument type="service" id="translation.dumper.xliff"/>
      </call>
      <call method="addDumper">
        <argument>po</argument>
        <argument type="service" id="translation.dumper.po"/>
      </call>
      <call method="addDumper">
        <argument>mo</argument>
        <argument type="service" id="translation.dumper.mo"/>
      </call>
      <call method="addDumper">
        <argument>yml</argument>
        <argument type="service" id="translation.dumper.yml"/>
      </call>
      <call method="addDumper">
        <argument>ts</argument>
        <argument type="service" id="translation.dumper.qt"/>
      </call>
      <call method="addDumper">
        <argument>csv</argument>
        <argument type="service" id="translation.dumper.csv"/>
      </call>
      <call method="addDumper">
        <argument>ini</argument>
        <argument type="service" id="translation.dumper.ini"/>
      </call>
      <call method="addDumper">
        <argument>json</argument>
        <argument type="service" id="translation.dumper.json"/>
      </call>
      <call method="addDumper">
        <argument>res</argument>
        <argument type="service" id="translation.dumper.res"/>
      </call>
    </service>
    <service id="property_accessor" class="Symfony\Component\PropertyAccess\PropertyAccessor"/>
    <service id="debug.emergency_logger_listener" class="Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="emergency"/>
      <argument>emergency</argument>
      <argument type="service" id="monolog.logger.emergency" on-invalid="null"/>
    </service>
    <service id="debug.stopwatch" class="Symfony\Component\Stopwatch\Stopwatch"/>
    <service id="debug.event_dispatcher" class="Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher">
      <tag name="monolog.logger" channel="event"/>
      <argument type="service">
        <service class="Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher" public="false">
          <argument type="service" id="service_container"/>
        </service>
      </argument>
      <argument type="service" id="debug.stopwatch"/>
      <argument type="service" id="monolog.logger.event" on-invalid="null"/>
      <call method="addListenerService">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument>monolog.handler.firephp</argument>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListenerService">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument>knp_rad.event_listener.resource_resolver</argument>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addSubscriberService">
        <argument>response_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\ResponseListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>streamed_response_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\StreamedResponseListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>locale_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\LocaleListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>debug.emergency_logger_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>debug.deprecation_logger_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>session_listener</argument>
        <argument>Symfony\Bundle\FrameworkBundle\EventListener\SessionListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>router_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\RouterListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>security.firewall</argument>
        <argument>Symfony\Component\Security\Http\Firewall</argument>
      </call>
      <call method="addSubscriberService">
        <argument>security.rememberme.response_listener</argument>
        <argument>Symfony\Component\Security\Http\RememberMe\ResponseListener</argument>
      </call>
    </service>
    <service id="debug.controller_resolver" class="Symfony\Component\HttpKernel\Controller\TraceableControllerResolver">
      <argument type="service">
        <service class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver" public="false">
          <tag name="monolog.logger" channel="request"/>
          <argument type="service" id="service_container"/>
          <argument type="service" id="controller_name_converter"/>
          <argument type="service" id="monolog.logger.request" on-invalid="ignore"/>
        </service>
      </argument>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="debug.deprecation_logger_listener" class="Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="deprecation"/>
      <argument>deprecation</argument>
      <argument type="service" id="monolog.logger.deprecation" on-invalid="null"/>
    </service>
    <service id="session" class="Symfony\Component\HttpFoundation\Session\Session">
      <argument type="service" id="session.storage.native"/>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag" public="false"/>
      </argument>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Flash\FlashBag" public="false"/>
      </argument>
    </service>
    <service id="session.storage.metadata_bag" class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag" public="false">
      <argument>_sf2_meta</argument>
      <argument>0</argument>
    </service>
    <service id="session.storage.native" class="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage">
      <argument type="collection"/>
      <argument type="service" id="session.handler"/>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.storage.php_bridge" class="Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage">
      <argument type="service" id="session.handler"/>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session_listener" class="Symfony\Bundle\FrameworkBundle\EventListener\SessionListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="security.secure_random" class="Symfony\Component\Security\Core\Util\SecureRandom">
      <tag name="monolog.logger" channel="security"/>
      <argument>/home/florian/workspace/gitpub/src/App/../../var/cache/dev/secure_random.seed</argument>
      <argument type="service" id="monolog.logger.security" on-invalid="ignore"/>
    </service>
    <service id="form.resolved_type_factory" class="Symfony\Component\Form\ResolvedFormTypeFactory"/>
    <service id="form.registry" class="Symfony\Component\Form\FormRegistry">
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension" public="false">
            <argument type="service" id="service_container"/>
            <argument type="collection">
              <argument key="form">form.type.form</argument>
              <argument key="birthday">form.type.birthday</argument>
              <argument key="checkbox">form.type.checkbox</argument>
              <argument key="choice">form.type.choice</argument>
              <argument key="collection">form.type.collection</argument>
              <argument key="country">form.type.country</argument>
              <argument key="date">form.type.date</argument>
              <argument key="datetime">form.type.datetime</argument>
              <argument key="email">form.type.email</argument>
              <argument key="file">form.type.file</argument>
              <argument key="hidden">form.type.hidden</argument>
              <argument key="integer">form.type.integer</argument>
              <argument key="language">form.type.language</argument>
              <argument key="locale">form.type.locale</argument>
              <argument key="money">form.type.money</argument>
              <argument key="number">form.type.number</argument>
              <argument key="password">form.type.password</argument>
              <argument key="percent">form.type.percent</argument>
              <argument key="radio">form.type.radio</argument>
              <argument key="repeated">form.type.repeated</argument>
              <argument key="search">form.type.search</argument>
              <argument key="textarea">form.type.textarea</argument>
              <argument key="text">form.type.text</argument>
              <argument key="time">form.type.time</argument>
              <argument key="timezone">form.type.timezone</argument>
              <argument key="url">form.type.url</argument>
              <argument key="button">form.type.button</argument>
              <argument key="submit">form.type.submit</argument>
              <argument key="reset">form.type.reset</argument>
              <argument key="currency">form.type.currency</argument>
            </argument>
            <argument type="collection">
              <argument key="form" type="collection">
                <argument>form.type_extension.form.http_foundation</argument>
                <argument>form.type_extension.form.validator</argument>
                <argument>form.type_extension.csrf</argument>
              </argument>
              <argument key="repeated" type="collection">
                <argument>form.type_extension.repeated.validator</argument>
              </argument>
              <argument key="submit" type="collection">
                <argument>form.type_extension.submit.validator</argument>
              </argument>
            </argument>
            <argument type="collection">
              <argument>form.type_guesser.validator</argument>
              <argument>knp_rad.form.type_guesser.data</argument>
            </argument>
          </service>
        </argument>
      </argument>
      <argument type="service" id="form.resolved_type_factory"/>
    </service>
    <service id="form.factory" class="Symfony\Component\Form\FormFactory">
      <argument type="service" id="form.registry"/>
      <argument type="service" id="form.resolved_type_factory"/>
    </service>
    <service id="form.type_guesser.validator" class="Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser">
      <tag name="form.type_guesser"/>
      <argument type="service" id="validator.mapping.class_metadata_factory"/>
    </service>
    <service id="form.type.form" class="Symfony\Component\Form\Extension\Core\Type\FormType">
      <tag name="form.type" alias="form"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="form.type.birthday" class="Symfony\Component\Form\Extension\Core\Type\BirthdayType">
      <tag name="form.type" alias="birthday"/>
    </service>
    <service id="form.type.checkbox" class="Symfony\Component\Form\Extension\Core\Type\CheckboxType">
      <tag name="form.type" alias="checkbox"/>
    </service>
    <service id="form.type.choice" class="Symfony\Component\Form\Extension\Core\Type\ChoiceType">
      <tag name="form.type" alias="choice"/>
    </service>
    <service id="form.type.collection" class="Symfony\Component\Form\Extension\Core\Type\CollectionType">
      <tag name="form.type" alias="collection"/>
    </service>
    <service id="form.type.country" class="Symfony\Component\Form\Extension\Core\Type\CountryType">
      <tag name="form.type" alias="country"/>
    </service>
    <service id="form.type.date" class="Symfony\Component\Form\Extension\Core\Type\DateType">
      <tag name="form.type" alias="date"/>
    </service>
    <service id="form.type.datetime" class="Symfony\Component\Form\Extension\Core\Type\DateTimeType">
      <tag name="form.type" alias="datetime"/>
    </service>
    <service id="form.type.email" class="Symfony\Component\Form\Extension\Core\Type\EmailType">
      <tag name="form.type" alias="email"/>
    </service>
    <service id="form.type.file" class="Symfony\Component\Form\Extension\Core\Type\FileType">
      <tag name="form.type" alias="file"/>
    </service>
    <service id="form.type.hidden" class="Symfony\Component\Form\Extension\Core\Type\HiddenType">
      <tag name="form.type" alias="hidden"/>
    </service>
    <service id="form.type.integer" class="Symfony\Component\Form\Extension\Core\Type\IntegerType">
      <tag name="form.type" alias="integer"/>
    </service>
    <service id="form.type.language" class="Symfony\Component\Form\Extension\Core\Type\LanguageType">
      <tag name="form.type" alias="language"/>
    </service>
    <service id="form.type.locale" class="Symfony\Component\Form\Extension\Core\Type\LocaleType">
      <tag name="form.type" alias="locale"/>
    </service>
    <service id="form.type.money" class="Symfony\Component\Form\Extension\Core\Type\MoneyType">
      <tag name="form.type" alias="money"/>
    </service>
    <service id="form.type.number" class="Symfony\Component\Form\Extension\Core\Type\NumberType">
      <tag name="form.type" alias="number"/>
    </service>
    <service id="form.type.password" class="Symfony\Component\Form\Extension\Core\Type\PasswordType">
      <tag name="form.type" alias="password"/>
    </service>
    <service id="form.type.percent" class="Symfony\Component\Form\Extension\Core\Type\PercentType">
      <tag name="form.type" alias="percent"/>
    </service>
    <service id="form.type.radio" class="Symfony\Component\Form\Extension\Core\Type\RadioType">
      <tag name="form.type" alias="radio"/>
    </service>
    <service id="form.type.repeated" class="Symfony\Component\Form\Extension\Core\Type\RepeatedType">
      <tag name="form.type" alias="repeated"/>
    </service>
    <service id="form.type.search" class="Symfony\Component\Form\Extension\Core\Type\SearchType">
      <tag name="form.type" alias="search"/>
    </service>
    <service id="form.type.textarea" class="Symfony\Component\Form\Extension\Core\Type\TextareaType">
      <tag name="form.type" alias="textarea"/>
    </service>
    <service id="form.type.text" class="Symfony\Component\Form\Extension\Core\Type\TextType">
      <tag name="form.type" alias="text"/>
    </service>
    <service id="form.type.time" class="Symfony\Component\Form\Extension\Core\Type\TimeType">
      <tag name="form.type" alias="time"/>
    </service>
    <service id="form.type.timezone" class="Symfony\Component\Form\Extension\Core\Type\TimezoneType">
      <tag name="form.type" alias="timezone"/>
    </service>
    <service id="form.type.url" class="Symfony\Component\Form\Extension\Core\Type\UrlType">
      <tag name="form.type" alias="url"/>
    </service>
    <service id="form.type.button" class="Symfony\Component\Form\Extension\Core\Type\ButtonType">
      <tag name="form.type" alias="button"/>
    </service>
    <service id="form.type.submit" class="Symfony\Component\Form\Extension\Core\Type\SubmitType">
      <tag name="form.type" alias="submit"/>
    </service>
    <service id="form.type.reset" class="Symfony\Component\Form\Extension\Core\Type\ResetType">
      <tag name="form.type" alias="reset"/>
    </service>
    <service id="form.type.currency" class="Symfony\Component\Form\Extension\Core\Type\CurrencyType">
      <tag name="form.type" alias="currency"/>
    </service>
    <service id="form.type_extension.form.http_foundation" class="Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension">
      <tag name="form.type_extension" alias="form"/>
    </service>
    <service id="form.type_extension.form.validator" class="Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension">
      <tag name="form.type_extension" alias="form"/>
      <argument type="service" id="validator"/>
    </service>
    <service id="form.type_extension.repeated.validator" class="Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension">
      <tag name="form.type_extension" alias="repeated"/>
    </service>
    <service id="form.type_extension.submit.validator" class="Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension">
      <tag name="form.type_extension" alias="submit"/>
    </service>
    <service id="form.csrf_provider" class="Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter">
      <argument type="service" id="security.csrf.token_manager"/>
    </service>
    <service id="form.type_extension.csrf" class="Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension">
      <tag name="form.type_extension" alias="form"/>
      <argument type="service" id="form.csrf_provider"/>
      <argument>true</argument>
      <argument>_token</argument>
      <argument type="service" id="translator.default"/>
      <argument>validators</argument>
    </service>
    <service id="security.csrf.token_manager" class="Symfony\Component\Security\Csrf\CsrfTokenManager">
      <argument type="service">
        <service class="Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator" public="false">
          <argument type="service" id="security.secure_random"/>
        </service>
      </argument>
      <argument type="service">
        <service class="Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage" public="false">
          <argument type="service" id="session"/>
        </service>
      </argument>
    </service>
    <service id="validator" class="Symfony\Component\Validator\Validator">
      <argument type="service" id="validator.mapping.class_metadata_factory"/>
      <argument type="service">
        <service class="Symfony\Bundle\FrameworkBundle\Validator\ConstraintValidatorFactory" public="false">
          <argument type="service" id="service_container"/>
          <argument type="collection">
            <argument key="validator.expression">validator.expression</argument>
            <argument key="security.validator.user_password">security.validator.user_password</argument>
          </argument>
        </service>
      </argument>
      <argument type="service" id="translator"/>
      <argument>validators</argument>
      <argument type="collection"/>
    </service>
    <service id="validator.mapping.class_metadata_factory" class="Symfony\Component\Validator\Mapping\ClassMetadataFactory" public="false">
      <argument type="service">
        <service class="Symfony\Component\Validator\Mapping\Loader\LoaderChain" public="false">
          <argument type="collection">
            <argument type="service">
              <service class="Symfony\Component\Validator\Mapping\Loader\AnnotationLoader" public="false">
                <argument type="service" id="annotation_reader"/>
              </service>
            </argument>
            <argument type="service">
              <service class="Symfony\Component\Validator\Mapping\Loader\StaticMethodLoader" public="false"/>
            </argument>
            <argument type="service">
              <service class="Symfony\Component\Validator\Mapping\Loader\XmlFilesLoader" public="false">
                <argument type="collection">
                  <argument>/home/florian/workspace/gitpub/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/config/validation.xml</argument>
                </argument>
              </service>
            </argument>
            <argument type="service">
              <service class="Symfony\Component\Validator\Mapping\Loader\YamlFilesLoader" public="false">
                <argument type="collection"/>
              </service>
            </argument>
          </argument>
        </service>
      </argument>
      <argument>null</argument>
    </service>
    <service id="validator.expression" class="Symfony\Component\Validator\Constraints\ExpressionValidator">
      <tag name="validator.constraint_validator" alias="validator.expression"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="routing.loader" class="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader">
      <tag name="monolog.logger" channel="router"/>
      <argument type="service" id="controller_name_converter"/>
      <argument type="service" id="monolog.logger.router" on-invalid="null"/>
      <argument type="service">
        <service class="Symfony\Component\Config\Loader\LoaderResolver" public="false">
          <call method="addLoader">
            <argument type="service">
              <service class="Symfony\Component\Routing\Loader\XmlFileLoader" public="false">
                <tag name="routing.loader"/>
                <argument type="service" id="file_locator"/>
              </service>
            </argument>
          </call>
          <call method="addLoader">
            <argument type="service">
              <service class="Symfony\Component\Routing\Loader\YamlFileLoader" public="false">
                <tag name="routing.loader"/>
                <argument type="service" id="file_locator"/>
              </service>
            </argument>
          </call>
          <call method="addLoader">
            <argument type="service">
              <service class="Symfony\Component\Routing\Loader\PhpFileLoader" public="false">
                <tag name="routing.loader"/>
                <argument type="service" id="file_locator"/>
              </service>
            </argument>
          </call>
          <call method="addLoader">
            <argument type="service">
              <service class="Knp\RadBundle\Routing\Loader\ConventionalLoader" public="false">
                <tag name="routing.loader"/>
                <argument type="service" id="file_locator"/>
              </service>
            </argument>
          </call>
        </service>
      </argument>
    </service>
    <service id="router.request_context" class="Symfony\Component\Routing\RequestContext" public="false">
      <argument></argument>
      <argument>GET</argument>
      <argument>localhost</argument>
      <argument>http</argument>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="router_listener" class="Symfony\Component\HttpKernel\EventListener\RouterListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="router"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.request" on-invalid="ignore"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="security.context" class="Symfony\Component\Security\Core\SecurityContext">
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="security.access.decision_manager"/>
      <argument>false</argument>
    </service>
    <service id="security.authentication.manager" class="Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager" public="false">
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider" public="false">
            <argument>52b301d2d5f14</argument>
          </service>
        </argument>
      </argument>
      <argument>true</argument>
      <call method="setEventDispatcher">
        <argument type="service" id="debug.event_dispatcher"/>
      </call>
    </service>
    <service id="security.authentication.trust_resolver" class="Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver" public="false">
      <argument>Symfony\Component\Security\Core\Authentication\Token\AnonymousToken</argument>
      <argument>Symfony\Component\Security\Core\Authentication\Token\RememberMeToken</argument>
    </service>
    <service id="security.access.decision_manager" class="Symfony\Component\Security\Core\Authorization\AccessDecisionManager" public="false">
      <argument type="collection">
        <argument type="service" id="knp_rad.security.voter.is_owner"/>
        <argument type="service">
          <service class="Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter" public="false">
            <tag name="security.voter" priority="245"/>
            <argument type="service">
              <service class="Symfony\Component\Security\Core\Authorization\ExpressionLanguage" public="false"/>
            </argument>
            <argument type="service" id="security.authentication.trust_resolver"/>
            <argument type="service">
              <service class="Symfony\Component\Security\Core\Role\RoleHierarchy" public="false">
                <argument type="collection">
                  <argument key="ROLE_ADMIN" type="collection">
                    <argument>ROLE_USER</argument>
                  </argument>
                  <argument key="ROLE_SUPER_ADMIN" type="collection">
                    <argument>ROLE_USER</argument>
                    <argument>ROLE_ADMIN</argument>
                    <argument>ROLE_ALLOWED_TO_SWITCH</argument>
                  </argument>
                </argument>
              </service>
            </argument>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter" public="false">
            <tag name="security.voter" priority="245"/>
            <argument type="service">
              <service class="Symfony\Component\Security\Core\Role\RoleHierarchy" public="false">
                <argument type="collection">
                  <argument key="ROLE_ADMIN" type="collection">
                    <argument>ROLE_USER</argument>
                  </argument>
                  <argument key="ROLE_SUPER_ADMIN" type="collection">
                    <argument>ROLE_USER</argument>
                    <argument>ROLE_ADMIN</argument>
                    <argument>ROLE_ALLOWED_TO_SWITCH</argument>
                  </argument>
                </argument>
              </service>
            </argument>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter" public="false">
            <tag name="security.voter" priority="250"/>
            <argument type="service" id="security.authentication.trust_resolver"/>
          </service>
        </argument>
      </argument>
      <argument>affirmative</argument>
      <argument>false</argument>
      <argument>true</argument>
    </service>
    <service id="security.firewall" class="Symfony\Component\Security\Http\Firewall">
      <tag name="kernel.event_subscriber"/>
      <argument type="service">
        <service class="Symfony\Bundle\SecurityBundle\Security\FirewallMap" public="false">
          <argument type="service" id="service_container"/>
          <argument type="collection">
            <argument key="security.firewall.map.context.dev" type="service">
              <service class="Symfony\Component\HttpFoundation\RequestMatcher" public="false">
                <argument>^/(_(profiler|wdt)|css|images|js)/</argument>
              </service>
            </argument>
            <argument key="security.firewall.map.context.app" type="service">
              <service class="Symfony\Component\HttpFoundation\RequestMatcher" public="false">
                <argument>^/</argument>
              </service>
            </argument>
          </argument>
        </service>
      </argument>
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id="security.validator.user_password" class="Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator">
      <tag name="validator.constraint_validator" alias="security.validator.user_password"/>
      <argument type="service" id="security.context"/>
      <argument type="service" id="security.encoder_factory"/>
    </service>
    <service id="security.rememberme.response_listener" class="Symfony\Component\Security\Http\RememberMe\ResponseListener">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="templating.helper.logout_url" class="Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper">
      <tag name="templating.helper" alias="logout_url"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="router"/>
    </service>
    <service id="templating.helper.security" class="Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper">
      <tag name="templating.helper" alias="security"/>
      <argument type="service" id="security.context" on-invalid="ignore"/>
    </service>
    <service id="security.firewall.map.context.dev" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext">
      <argument type="collection"/>
      <argument>null</argument>
    </service>
    <service id="security.firewall.map.context.app" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext">
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Security\Http\Firewall\ChannelListener" public="false">
            <tag name="monolog.logger" channel="security"/>
            <argument type="service">
              <service class="Symfony\Component\Security\Http\AccessMap" public="false"/>
            </argument>
            <argument type="service">
              <service class="Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint" public="false">
                <argument>80</argument>
                <argument>443</argument>
              </service>
            </argument>
            <argument type="service" id="monolog.logger.security" on-invalid="null"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Security\Http\Firewall\ContextListener" public="false">
            <argument type="service" id="security.context"/>
            <argument type="collection">
              <argument type="service">
                <service class="Symfony\Component\Security\Core\User\InMemoryUserProvider" public="false">
                  <call method="createUser">
                    <argument type="service">
                      <service class="Symfony\Component\Security\Core\User\User" public="false">
                        <argument>user</argument>
                        <argument>userpass</argument>
                        <argument type="collection">
                          <argument>ROLE_USER</argument>
                        </argument>
                      </service>
                    </argument>
                  </call>
                  <call method="createUser">
                    <argument type="service">
                      <service class="Symfony\Component\Security\Core\User\User" public="false">
                        <argument>admin</argument>
                        <argument>adminpass</argument>
                        <argument type="collection">
                          <argument>ROLE_ADMIN</argument>
                        </argument>
                      </service>
                    </argument>
                  </call>
                </service>
              </argument>
            </argument>
            <argument>app</argument>
            <argument type="service" id="monolog.logger.security" on-invalid="null"/>
            <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener" public="false">
            <argument type="service" id="security.context"/>
            <argument>52b301d2d5f14</argument>
            <argument type="service" id="monolog.logger.security" on-invalid="null"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Component\Security\Http\Firewall\AccessListener" public="false">
            <tag name="monolog.logger" channel="security"/>
            <argument type="service" id="security.context"/>
            <argument type="service" id="security.access.decision_manager"/>
            <argument type="service">
              <service class="Symfony\Component\Security\Http\AccessMap" public="false"/>
            </argument>
            <argument type="service" id="security.authentication.manager"/>
          </service>
        </argument>
      </argument>
      <argument type="service">
        <service class="Symfony\Component\Security\Http\Firewall\ExceptionListener" public="false">
          <argument type="service" id="security.context"/>
          <argument type="service" id="security.authentication.trust_resolver"/>
          <argument type="service">
            <service class="Symfony\Component\Security\Http\HttpUtils" public="false">
              <argument type="service" id="router" on-invalid="null"/>
              <argument type="service" id="router" on-invalid="null"/>
            </service>
          </argument>
          <argument>app</argument>
          <argument>null</argument>
          <argument>null</argument>
          <argument>null</argument>
          <argument type="service" id="monolog.logger.security" on-invalid="null"/>
        </service>
      </argument>
    </service>
    <service id="monolog.handler.main" class="Monolog\Handler\StreamHandler">
      <argument>/home/florian/workspace/gitpub/src/App/../../var/logs/dev.log</argument>
      <argument>100</argument>
      <argument>true</argument>
    </service>
    <service id="monolog.handler.firephp" class="Symfony\Bridge\Monolog\Handler\FirePHPHandler">
      <tag name="kernel.event_listener" event="kernel.response" method="onKernelResponse"/>
      <argument>200</argument>
      <argument>true</argument>
    </service>
    <service id="knp_rad.bundle.guesser" class="Knp\RadBundle\AppBundle\BundleGuesser">
      <argument type="service" id="kernel"/>
      <argument type="service" id="knp_rad.reflection_factory"/>
      <argument type="collection">
        <argument>App</argument>
      </argument>
    </service>
    <service id="knp_rad.reflection_factory" class="Knp\RadBundle\Reflection\ReflectionFactory"/>
    <service id="knp_rad.event_listener.resource_resolver" class="Knp\RadBundle\EventListener\ResourceResolverListener">
      <tag name="kernel.event_listener" event="kernel.controller"/>
      <argument type="service">
        <service class="Knp\RadBundle\Resource\Resolver\RequestResolver" public="false">
          <argument type="service">
            <service class="Knp\RadBundle\Resource\Resolver\ResourceResolver" public="false">
              <argument type="service" id="service_container"/>
              <argument type="service">
                <service class="Knp\RadBundle\Resource\Resolver\ArgumentResolver" public="false"/>
              </argument>
            </service>
          </argument>
        </service>
      </argument>
    </service>
    <service id="knp_rad.form.manager" class="Knp\RadBundle\Form\FormManager" scope="request">
      <tag name="remove-when-missing" service="form.factory"/>
      <argument type="service" id="request"/>
      <call method="registerCreator">
        <argument type="service" id="knp_rad.form.type_creator"/>
        <argument>2</argument>
      </call>
      <call method="registerCreator">
        <argument type="service" id="knp_rad.form.default_creator"/>
        <argument>1</argument>
      </call>
      <call method="registerCreator">
        <argument type="service" id="knp_rad.form.type_creator"/>
        <argument>2</argument>
      </call>
      <call method="registerCreator">
        <argument type="service" id="knp_rad.form.default_creator"/>
        <argument>1</argument>
      </call>
    </service>
    <service id="knp_rad.form.type_creator" class="Knp\RadBundle\Form\FormTypeCreator" public="false">
      <tag name="knp_rad.form.creator" priority="2"/>
      <tag name="remove-when-missing" service="form.factory"/>
      <argument type="service" id="knp_rad.reflection.metadata_fetcher"/>
      <argument type="service" id="form.factory"/>
      <argument type="service" id="form.registry"/>
      <argument type="service" id="knp_rad.bundle.guesser"/>
    </service>
    <service id="knp_rad.form.default_creator" class="Knp\RadBundle\Form\DefaultFormCreator" public="false">
      <tag name="knp_rad.form.creator" priority="1"/>
      <tag name="remove-when-missing" service="form.factory"/>
      <argument type="service" id="knp_rad.reflection.metadata_fetcher"/>
      <argument type="service" id="form.factory"/>
      <argument type="service" id="knp_rad.form.type_guesser.data"/>
    </service>
    <service id="knp_rad.reflection.metadata_fetcher" class="Knp\RadBundle\Reflection\ClassMetadataFetcher" public="false"/>
    <service id="knp_rad.form.type_guesser.data" class="Knp\RadBundle\Form\DataTypeGuesser">
      <tag name="form.type_guesser"/>
      <tag name="remove-when-missing" service="form.factory"/>
    </service>
    <service id="knp_rad.security.voter.is_owner" class="Knp\RadBundle\Security\Voter\IsOwnerVoter">
      <tag name="security.voter"/>
      <tag name="remove-when-missing" service="security.context"/>
    </service>
    <service id="knp_rad.twig.datatable" class="Knp\RadBundle\Twig\DataTableTwigExtension">
      <tag name="twig.extension"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="knp_rad.flash.message_renderer" class="Knp\RadBundle\Flash\MessageRenderer">
      <tag name="remove-when-missing" service="translator"/>
      <argument type="service" id="translator"/>
      <argument>messages</argument>
    </service>
    <service id="knp_rad.twig.flash_extension" class="Knp\RadBundle\Twig\FlashExtension">
      <tag name="twig.extension"/>
      <tag name="remove-when-missing" service="translator"/>
      <argument type="service" id="knp_rad.flash.message_renderer"/>
      <argument type="service" id="session"/>
    </service>
    <service id="app.mongo_client" class="MongoClient">
      <argument>mongodb://localhost:27017</argument>
    </service>
    <service id="app.mongo_db" class="MongoDB" factory-method="selectDB" factory-service="mongo_client">
      <argument>gitpub</argument>
    </service>
    <service id="app.controller.dashboard" class="App\Controller\DashboardController">
      <argument type="service" id="app.dashboard"/>
    </service>
    <service id="app.dashboard" class="App\Dashboard">
      <argument type="service" id="github.client"/>
    </service>
    <service id="github.client" class="Github\Client">
      <argument type="service" id="github.client.cached"/>
      <call method="authenticate">
        <argument>6244e67ae95f2307851af09415046def11cfe205</argument>
        <argument>null</argument>
        <argument>http_token</argument>
      </call>
    </service>
    <service id="github.client.cached" class="Github\HttpClient\CachedHttpClient">
      <argument type="collection">
        <argument key="cache_dir">/home/florian/workspace/gitpub/src/App/../../var/cache/dev</argument>
        <argument key="base_url">https://api.github.com</argument>
      </argument>
    </service>
    <service id="monolog.logger.request" class="Symfony\Bridge\Monolog\Logger">
      <argument>request</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.firephp"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.emergency" class="Symfony\Bridge\Monolog\Logger">
      <argument>emergency</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.firephp"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.event" class="Symfony\Bridge\Monolog\Logger">
      <argument>event</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.firephp"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.deprecation" class="Symfony\Bridge\Monolog\Logger">
      <argument>deprecation</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.firephp"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.security" class="Symfony\Bridge\Monolog\Logger">
      <argument>security</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.firephp"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="monolog.logger.router" class="Symfony\Bridge\Monolog\Logger">
      <argument>router</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.firephp"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="session.storage.filesystem" class="Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage">
      <argument>/home/florian/workspace/gitpub/src/App/../../var/cache/dev/sessions</argument>
      <argument>MOCKSESSID</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.handler" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler">
      <argument>/home/florian/workspace/gitpub/src/App/../../var/cache/dev/sessions</argument>
    </service>
    <service id="router" class="Symfony\Bundle\FrameworkBundle\Routing\Router">
      <tag name="monolog.logger" channel="router"/>
      <argument type="service" id="service_container"/>
      <argument>/home/florian/workspace/gitpub/src/App/config/routing_dev.yml</argument>
      <argument type="collection">
        <argument key="cache_dir">/home/florian/workspace/gitpub/src/App/../../var/cache/dev</argument>
        <argument key="debug">true</argument>
        <argument key="generator_class">Symfony\Component\Routing\Generator\UrlGenerator</argument>
        <argument key="generator_base_class">Symfony\Component\Routing\Generator\UrlGenerator</argument>
        <argument key="generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\PhpGeneratorDumper</argument>
        <argument key="generator_cache_class">AppDevUrlGenerator</argument>
        <argument key="matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</argument>
        <argument key="matcher_base_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</argument>
        <argument key="matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper</argument>
        <argument key="matcher_cache_class">AppDevUrlMatcher</argument>
        <argument key="strict_requirements">true</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="monolog.logger.router" on-invalid="ignore"/>
    </service>
    <service id="annotation_reader" class="Doctrine\Common\Annotations\FileCacheReader">
      <argument type="service">
        <service class="Doctrine\Common\Annotations\AnnotationReader" public="false"/>
      </argument>
      <argument>/home/florian/workspace/gitpub/src/App/../../var/cache/dev/annotations</argument>
      <argument>true</argument>
    </service>
    <service id="security.encoder_factory" class="Symfony\Component\Security\Core\Encoder\EncoderFactory">
      <argument type="collection">
        <argument key="Symfony\Component\Security\Core\User\User" type="collection">
          <argument key="class">%security.encoder.plain.class%</argument>
          <argument key="arguments" type="collection">
            <argument>false</argument>
          </argument>
        </argument>
      </argument>
    </service>
    <service id="logger" class="Symfony\Bridge\Monolog\Logger">
      <argument>app</argument>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.firephp"/>
      </call>
      <call method="pushHandler">
        <argument type="service" id="monolog.handler.main"/>
      </call>
    </service>
    <service id="event_dispatcher" alias="debug.event_dispatcher"/>
    <service id="session.storage" alias="session.storage.native"/>
  </services>
</container>
